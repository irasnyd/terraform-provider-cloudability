package cloudability

import (
	"fmt"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/skyscrapr/cloudability-sdk-go/cloudability"
	"log"
	"time"
)

func dataSourceAccountVerification() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceAccountVerificationRead,
		Schema: map[string]*schema.Schema{
			"vendor_account_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "12 digit string corresponding to your AWS account ID",
			},
			"vendor_key": {
				Type:     schema.TypeString,
				Optional: true,
				Default:  "aws",
				// ForceNew:    true,
				Description: "'aws'",
			},
			"state": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Examples: unverified, verified, error",
			},
			"last_verification_attempted_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Date timestamp, example: 1970-01-01T00:00:00.000Z",
			},
			"external_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The external ID used to prevent confused deputies. Generated by Cloudability",
			},
			"message": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Error message for credentials in error state",
			},
			"retry_count": {
				Type:        schema.TypeInt,
				Optional:    true,
				Default:     20,
				Description: "Number of times to retry the verification",
			},
			"retry_wait": {
				Type:        schema.TypeInt,
				Optional:    true,
				Default:     5,
				Description: "Number of seconds to wait between verification retries",
			},
			"dependency": {
				Type:        schema.TypeString,
				Optional:    true,
				ForceNew:    true,
				Description: "Dummy dependency to avoid depends_on bug",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(1 * time.Minute),
		},
	}
}

func dataSourceAccountVerificationRead(d *schema.ResourceData, meta interface{}) error {
	vendorKey := d.Get("vendor_key").(string)
	accountID := d.Get("vendor_account_id").(string)
	retryCount := d.Get("retry_count").(int)
	retryWait := d.Get("retry_wait").(int)

	client := meta.(*cloudability.Client)
	var account *cloudability.Account
	log.Printf("[DEBUG] resourceAccountVerificationRead [account_id: %q]", accountID)
	err := retry(retryCount, time.Duration(retryWait)*time.Second, func() (exit bool, err error) {
		account, err = client.Vendors().VerifyAccount(vendorKey, accountID)
		if err != nil {
			log.Printf("[DEBUG] VerifyAccount failed (%s)", err)
			return false, err
		}
		if account.Verification.State != "verified" {
			log.Printf("[DEBUG] Invalid verfification state (%s) Reason: %s", account.Verification.State, account.Verification.Message)
			err = fmt.Errorf("verification was not successful: [%s] - %s", account.Verification.State, account.Verification.Message)
			return false, err
		}
		log.Print("[DEBUG] Account Verified")
		return true, nil
	})
	if err != nil {
		log.Printf("[DEBUG] Could not verify the account: %q", err)
		return err
	}
	d.SetId(account.VendorAccountID)
	d.Set("vendor_account_id", account.VendorAccountID)
	d.Set("retry_count", retryCount)
	d.Set("retry_wait", retryWait)
	d.Set("vendor_key", account.VendorKey)
	d.Set("state", account.Verification.State)
	d.Set("last_verification_attempted_at", account.Verification.LastVerificationAttemptedAt)
	d.Set("message", account.Verification.Message)
	d.Set("external_id", account.Authorization.ExternalID)
	return nil
}
